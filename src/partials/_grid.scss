// TODOs
// >-Make non repeating cols and rows not use the CSS repeat() code
// -Have the code check whether or not to auto create grid item variables in _grid/_sub-grid
// -Have the ability to pass custom grid item variables to _grid/_sub-grid
// >-Have grid-items/sub-grid-items also take in a <map> to create custom grid areas with the 1/1/1/1 system (possible?)(Already done in grid-item-areas?)(Yep, I already created this)
@use "sass:list";
@use "sass:string";


// Variables to make using this set of mixins easier.
// TODO pick and easier one to use from the latter four.
$standard-tablet-threshold: 426px;
$standard-desktop-threshold:769px;
$s-t-t: $standard-tablet-threshold;
$s-d-t: $standard-desktop-threshold;
$stt: $standard-tablet-threshold;
$sdt: $standard-desktop-threshold;

// This gets added when _grid.scss is called.
// This code is what gets _grid to work.
.grid{
    height: var(--height, auto);
    width: var(--width, 100%);
    background: var(--bg, none);
    // Add border here

    display: grid;
    grid-template-columns: var(--cols, 1fr); // TODO switch 1fr to none?
    grid-template-rows: var(--rows, 1fr);
    column-gap: var(--col-gap, 0);
    row-gap: var(--row-gap, 0);
    grid-template-areas: var(--ga, "");

    // Add more grid related stuff here.
}

// Maker for the item holders.
// @mixin grid-items($n: 1){
//     @for $i from 1 through $n {
//         .grid-item-#{$i}{
//             grid-area: var(--grid-item-#{$i});
//             @content;
//         }
//     }
// }

@mixin grid-items($items: 1, $modifier: null){
    
    @if type-of($items) == type-of(1){
        // Creates items from a number count
        @for $i from 1 through $items {
            .grid-item-#{$i}{
                grid-area: var(--grid-item-#{$i});
                @content;
            }
        }
    }@else if type-of($items) == type-of(("":"")) {
        
        // Creates grid areas from a map.
        @each $name, $area in $items {
            .grid-item-#{$name}{
                grid-area: #{$area};
                @content;
            }
        }

    }@else {
        // Creates a grid areas from a list.
        $count: 1;
        @each $name in $items {

            // TODO Should this create a class name with $name in it? That seems to make it less reusable.
            @if string.index($name, "/") == null{
                .grid-item-#{$name}{
                    grid-area: #{$name};
                    @content;
                }
            }@else {
                .grid-item-#{$count}{
                    grid-area: #{$name};
                    @content;
                }

                $count: $count + 1;
            }
        }
    }
}


// It takes <name> or <row-start> / <col-start> / <row-end> / <col-end>
// $list can be a list of <strings> or a <map>
@mixin grid-item-areas($list){

    // Check to see if the user sent a map or a list.
    // TODO Test to see if this code works.
    @if type-of($list) == type-of(("":"")) {
        
        // Creates grid areas from a map.
        @each $name, $area in $list {
            .grid-item-#{$name}{
                grid-area: #{$area};
                @content;
            }
        }

    }@else {
        // Creates a grid areas from a list.
        $count: 1;
        @each $name in $list {

            @if string.index($name, "/") == null{
                .grid-item-#{$name}{
                    grid-area: #{$name};
                    @content;
                }
            }@else {
                .grid-item-#{$count}{
                    grid-area: #{$name};
                    @content;
                }

                $count: $count + 1;
            }
        }
    }
}


@mixin sub-grid-items($n: 1){
    @for $i from 1 through $n {
        .sub-grid-item-#{$i}{
            grid-area: var(--sub-grid-item-#{$i});
            @content;
        }
    }
}

@mixin sub-grid-item-areas($list){
    
    // Check to see if the user sent a map or a list.
    @if type-of($list) == type-of(("":"")) {
        
        @each $name, $area in $list {
            .sub-grid-item-#{$name}{
                grid-area: #{$area};
                @content;
            }
        }

    }@else {

        $count: 1;
        @each $name in $list {

            @if string.index($name, "/") == null{
                .sub-grid-item-#{$name}{
                    grid-area: #{$name};
                    @content;
                }
            }@else {
                .sub-grid-item-#{$count}{
                    grid-area: #{$name};
                    @content;
                }

                $count: $count + 1;
            }
        }
    }
}



@mixin _grid(
            // How to size the grid and align/justify the items.
            $height: auto,
            $width: 100%,
            $background: none,
            $justify-items: center,
            $align-items: center,
            
            // How many columns and rows to make.
            $cols: null,
            $col-repeat: null,
            $rows: null,
            $row-repeat: null,
            $grid-areas: null,
            
            // How to pad the grid inside and out.
            $col-gap: 0,
            $row-gap: 0,
            $side-padding: minmax(20px, 1fr),//20px, // Original: 10%
            $top-padding: 0,
            $bottom-padding: 0,

            // Whether or not to create custom item variables
            $auto-items: true,
            $custom-items: null,
            
            // Where to put the threshold and how to set it up for Tablet.
            $tablet-threshold: 0,
            $tablet-height: auto,
            $tablet-width: 100%,
            $tablet-background: none,
            $tablet-cols: null,
            $tablet-col-repeat: null,
            $tablet-rows: null,
            $tablet-row-repeat: null,
            $tablet-grid-areas: null,
            $tablet-side-padding: minmax(15px, 1fr), //15px,
            $tablet-top-padding: 0,
            $tablet-bottom-padding: 0,
            $tablet-col-gap: 0,
            $tablet-row-gap: 0,
            $tablet-justify-items: center,
            $tablet-align-items: center,
            $tablet-auto-items: false,
            $tablet-custom-items: null,
            
            // Where to put the threshold and how to set it up for Desktop.
            $desktop-threshold: 0,
            $desktop-height: auto,
            $desktop-width: 100%,
            $desktop-background: none,
            $desktop-cols: null,
            $desktop-col-repeat: null,
            $desktop-rows: null,
            $desktop-row-repeat: null,
            $desktop-grid-areas: null,
            $desktop-side-padding: minmax(15px, 1fr), //15px,
            $desktop-top-padding: 0,
            $desktop-bottom-padding: 0,
            $desktop-col-gap: 0,
            $desktop-row-gap: 0,
            $desktop-justify-items: center,
            $desktop-align-items: center,
            $desktop-auto-items: false,
            $desktop-custom-items: null){
    


    // **************
    // *** MOBILE ***
    // **************

    //Setup some variables that won't change for this screen size here.
    --height: #{$height};
    --width: #{$width};
    --bg: #{$background};
    justify-items: #{$justify-items};
    align-items: #{$align-items};
    --col-gap: #{$col-gap};
    --row-gap: #{$row-gap};


    // ********************************************************************
    // This section adds the $side-padding ('.') to the $grid-areas.    ***
    // It also converts the input into a string, for the mobile layout. ***
    // ********************************************************************

    @if $grid-areas != null {

        $temp: null;

        @each $area in $grid-areas {
            $temp: $temp + "\". " + $area + " .\" ";
        }
        $grid-areas: $temp;

        --ga: #{$grid-areas}; 
    }



    // ***********************************************************************************
    // (Mobile)  This section creates the column part of the grid based on user input. ***
    // ***********************************************************************************

    @if $cols != null and $col-repeat == null {
        // Manual creation of the grid

        --cols: [grid-col-start] #{$side-padding} #{$cols} #{$side-padding} [grid-col-end];

        $col-repeat: list.length($cols);

    }@else if $cols == null and $col-repeat != null{
        // Repeat a default

        --cols: [grid-col-start] #{$side-padding} repeat(#{$col-repeat},[col] 1fr) #{$side-padding} [grid-col-end];

    }@else if $cols != null and $col-repeat != null{
        // Repeat users input X amount of times

        --cols: [grid-col-start] #{$side-padding} repeat(#{$col-repeat}, #{$cols}) #{$side-padding} [grid-col-end];

        $col-repeat: list.length($cols) * $col-repeat;

    }@else {
        // No user input so just create a single collumn (or default)

        --cols: [grid-col-start] #{$side-padding} 1fr #{$side-padding} [grid-col-end];

        $col-repeat: 1;
    }
    

    // *********************************************************************************
    // (Mobile)  This section creates the row part of the grid based on user input.  ***
    // *********************************************************************************

    @if $rows != null and $row-repeat == null {
        // Full manual

        --rows: [grid-row-start] #{$rows} [grid-row-end];

        $row-repeat: list.length($rows);

    }@else if $rows == null and $row-repeat != null{
        // Repeat default

        --rows: [grid-row-start] repeat(#{$row-repeat}, [row] auto) [grid-row-end];

    }@else if $rows != null and $row-repeat != null{
        // Repeat users input X amount of times

        --rows: [grid-row-start] repeat(#{$row-repeat}, #{$rows}) [grid-row-end];

        $row-repeat: list.length($rows) * $row-repeat;

    }@else {
        // No user input so just create a single row (or default)

        --rows: [grid-row-start] auto [grid-row-end];

        $row-repeat: 1;

    }



    // *********************************************************************************************
    // (Mobile) This section creates the variables for the items that are placed into the grid.  ***
    // *********************************************************************************************

    @if $col-repeat > 0 and $row-repeat > 0 and $auto-items{
        $count: 1;
        @for $i from 1 through $row-repeat{
            @for $j from 1 through $col-repeat{
                --grid-item-#{$count}: #{$i} / #{1 + $j} / #{1 + $i} / #{2 + $j};
                $count: $count + 1;
            }
        }
    }@else if $custom-items != null and $auto-items == false{
        
        @if type-of($custom-items) == type-of(1){
            // Type is number
            // Not sure how useful this one will be.
            $count: 1;
            @for $i from 1 through $custom-items {
                --grid-item-#{$count}: #{$i} / #{1 + $j} / #{1 + $i} / #{2 + $j};
                $count: $count + 1;
            }
        }@else if type-of($custom-items) == type-of(("":"")){
            // Type is map
            @each $name, $area in $custom-items {
                --grid-item-#{$name}: #{$area};
            }

        }@else {
            // Type then is a List
            $count: 1;
            @each $name in $custom-items {
                @if string.index($name, "/") == null {
                    --grid-item-#{$name}: #{$name};
                }@else {
                    --grid-item-#{$count}: #{$name};
                    $count: $count + 1;
                }
            }
        }
    }
    




    // **************
    // *** TABLET ***
    // **************

    // Changes for different layouts/screen sizes.
    @if type-of($tablet-threshold) == type-of(0) and $tablet-threshold > 0 {
        @media screen and (min-width: $tablet-threshold){
        
            // ********************************************************************
            // This section changes the layout if needed for the table layout.  ***
            // ********************************************************************

            @if $justify-items != $tablet-justify-items {
                justify-items: #{$tablet-justify-items};
            }
            @if $align-items != $tablet-align-items {
                align-items: #{$tablet-align-items};
            }
            @if $col-gap != $tablet-col-gap {
                --col-gap: #{$tablet-col-gap};
            }
            @if $row-gap != $tablet-row-gap {
                --row-gap: #{$tablet-row-gap};
            }


            // ********************************************************************
            // This section adds the $side-padding ('.') to the $grid-areas.    ***
            // It also converts the input into a string, for the tablet layout. ***
            // ********************************************************************

            @if $tablet-grid-areas != null {

                $temp: null;

                @each $area in $tablet-grid-areas {
                    $temp: $temp + "\". " + $area + " .\" ";
                }

                $tablet-grid-areas: $temp;
                --ga: #{$tablet-grid-areas};
            }
            

            // ***********************************************************************************
            // (Tablet)  This section creates the column part of the grid based on user input. ***
            // ***********************************************************************************

            @if $tablet-cols != null and $tablet-col-repeat == null {
                // Manual creation of the grid's columns for tablet.
                
                --cols: [grid-col-start] #{$tablet-side-padding} #{$tablet-cols} #{$tablet-side-padding} [grid-col-end];
        
                $tablet-col-repeat: list.length($tablet-cols);
        

            
            }@else if $tablet-cols == null and $tablet-col-repeat != null{
                // Repeat a default
        
                --cols: [grid-col-start] #{$tablet-side-padding} repeat(#{$tablet-col-repeat},[col] 1fr) #{$tablet-side-padding} [grid-col-end];
        

            
            }@else if $tablet-cols != null and $tablet-col-repeat != null{
                // Repeat users input X amount of times
        
                --cols: [grid-col-start] #{$tablet-side-padding} repeat(#{$tablet-col-repeat}, #{$tablet-cols}) #{$tablet-side-padding} [grid-col-end];
        
                $tablet-col-repeat: list.length($tablet-cols) * $tablet-col-repeat;


            
            }@else {
                // No user input so just create a single collumn (or default)
        
                --cols: [grid-col-start] #{$tablet-side-padding} 1fr #{$tablet-side-padding} [grid-col-end];
        
                $col-repeat: 1;
            }
            


            // ********************************************************************************
            // (Tablet)  This section creates the row part of the grid based on user input. ***
            // ********************************************************************************

            @if $tablet-rows != null and $tablet-row-repeat == null {
                // Full manual
        
                --rows: [grid-row-start] #{$tablet-rows} [grid-row-end];
        
                $tablet-row-repeat: list.length($tablet-rows);
        

            }@else if $tablet-rows == null and $tablet-row-repeat != null{
                // Repeat default
        
                --rows: [grid-row-start] repeat(#{$tablet-row-repeat}, [row] auto) [grid-row-end];
        

            }@else if $tablet-rows != null and $tablet-row-repeat != null{
                // Repeat users input X amount of times
        
                --rows: [grid-row-start] repeat(#{$tablet-row-repeat}, #{$tablet-rows}) [grid-row-end];
        
                $tablet-row-repeat: list.length($tablet-rows) * $tablet-row-repeat;
        

            }@else {
                // No user input so just create a single tablet-row (or default)
        
                --rows: [grid-row-start] auto [grid-row-end];
        
                $tablet-row-repeat: 1;
        
            }
    
    
            
            // *********************************************************************************************
            // (Tablet) This section creates the variables for the items that are placed into the grid.  ***
            // *********************************************************************************************

            @if $tablet-col-repeat > 0 and $tablet-row-repeat > 0 and $tablet-auto-items{
                $count: 1;
                @for $i from 1 through $tablet-row-repeat{
                    @for $j from 1 through $tablet-col-repeat{
                        --grid-item-#{$count}: #{$i} / #{1 + $j} / #{1 + $i} / #{2 + $j};
                        $count: $count + 1;
                    }
                }
            }@else if $tablet-custom-items != null and $tablet-auto-items == false{
        
                @if type-of($tablet-custom-items) == type-of(1){
                    // Type is number
                    // Not sure how useful this one will be.
                    $count: 1;
                    @for $i from 1 through $tablet-custom-items {
                        --grid-item-#{$count}: #{$i} / #{1 + $j} / #{1 + $i} / #{2 + $j};
                        $count: $count + 1;
                    }
                }@else if type-of($tablet-custom-items) == type-of(("":"")){
                    // Type is map
                    @each $name, $area in $tablet-custom-items {
                        --grid-item-#{$name}: #{$area};
                    }
        
                }@else {
                    // Type then is a List
                    $count: 1;
                    @each $name in $tablet-custom-items {
                        @if string.index($name, "/") == null {
                            --grid-item-#{$name}: #{$name};
                        }@else {
                            --grid-item-#{$count}: #{$name};
                            $count: $count + 1;
                        }
                    }
                }
            }
        }
    }



    // ***************
    // *** DESKTOP ***
    // ***************

    // Check to see if the $desktop-threshold has been changed, and add a desktop code if it has.
    @if type-of($desktop-threshold) == type-of(0) and $desktop-threshold > 0 {
        @media screen and (min-width: $desktop-threshold){


            // **********************************************************************
            // This section changes the layout if needed for the desktop layout.  ***
            // **********************************************************************

            @if $justify-items != $desktop-justify-items {
                justify-items: #{$desktop-justify-items};
            }
            @if $align-items != $desktop-align-items {
                align-items: #{$desktop-align-items};
            }
            @if $col-gap != $desktop-col-gap {
                --col-gap: #{$desktop-col-gap};
            }
            @if $row-gap != $desktop-row-gap {
                --row-gap: #{$desktop-row-gap};
            }



            // *********************************************************************
            // This section adds the $side-padding ('.') to the $grid-areas.     ***
            // It also converts the input into a string, for the desktop layout. ***
            // *********************************************************************
            
            @if $desktop-grid-areas != null {

                $temp: null;

                @each $area in $desktop-grid-areas {
                    $temp: $temp + "\". " + $area + " .\" ";
                }

                $desktop-grid-areas: $temp;
                --ga: #{$desktop-grid-areas};
            }
    
            

            // ************************************************************************************
            // (Desktop)  This section creates the column part of the grid based on user input. ***
            // ************************************************************************************

            @if $desktop-cols != null and $desktop-col-repeat == null {
                // Manual creation of the grid
        
                --cols: [grid-col-start] #{$desktop-side-padding} #{$desktop-cols} #{$desktop-side-padding} [grid-col-end];
        
                $desktop-col-repeat: list.length($desktop-cols);
        
            }@else if $desktop-cols == null and $desktop-col-repeat != null{
                // Repeat a default
        
                --cols: [grid-col-start] #{$desktop-side-padding} repeat(#{$desktop-col-repeat},[col] 1fr) #{$desktop-side-padding} [grid-col-end];
        
            }@else if $desktop-cols != null and $desktop-col-repeat != null{
                // Repeat users input X amount of times
        
                --cols: [grid-col-start] #{$desktop-side-padding} repeat(#{$desktop-col-repeat}, #{$desktop-cols}) #{$desktop-side-padding} [grid-col-end];
        
                $desktop-col-repeat: list.length($desktop-cols) * $desktop-col-repeat;
        
            }@else {
                // No user input so just create a single collumn (or default)
        
                --cols: [grid-col-start] #{$desktop-side-padding} 1fr #{$desktop-side-padding} [grid-col-end];
        
                $col-repeat: 1;
            }
            
            
            // *********************************************************************************
            // (Desktop)  This section creates the row part of the grid based on user input. ***
            // *********************************************************************************

            @if $desktop-rows != null and $desktop-row-repeat == null {
                // Full manual
        
                --rows: [grid-row-start] #{$desktop-rows} [grid-row-end];
        
                $desktop-row-repeat: list.length($desktop-rows);
        

            }@else if $desktop-rows == null and $desktop-row-repeat != null{
                // Repeat default
        
                --rows: [grid-row-start] repeat(#{$desktop-row-repeat}, [row] auto) [grid-row-end];
        

            }@else if $desktop-rows != null and $desktop-row-repeat != null{
                // Repeat users input X amount of times
        
                --rows: [grid-row-start] repeat(#{$desktop-row-repeat}, #{$desktop-rows}) [grid-row-end];
        
                $desktop-row-repeat: list.length($desktop-rows) * $desktop-row-repeat;
        

            }@else {
                // No user input so just create a single desktop-row (or default)
        
                --rows: [grid-row-start] auto [grid-row-end];
        
                $desktop-row-repeat: 1;
        
            }


    
            // **********************************************************************************************
            // (Desktop) This section creates the variables for the items that are placed into the grid.  ***
            // **********************************************************************************************

            @if $desktop-col-repeat > 0 and $desktop-row-repeat > 0 and $desktop-auto-items{
                $count: 1;
                @for $i from 1 through $desktop-row-repeat{
                    @for $j from 1 through $desktop-col-repeat{
                        --grid-item-#{$count}: #{$i} / #{1 + $j} / #{1 + $i} / #{2 + $j};
                        $count: $count + 1;
                    }
                }
            }@else if $desktop-custom-items != null and $desktop-auto-items == false{
        
                @if type-of($desktop-custom-items) == type-of(1){
                    // Type is number
                    // Not sure how useful this one will be.
                    $count: 1;
                    @for $i from 1 through $desktop-custom-items {
                        --grid-item-#{$count}: #{$i} / #{1 + $j} / #{1 + $i} / #{2 + $j};
                        $count: $count + 1;
                    }
                }@else if type-of($desktop-custom-items) == type-of(("":"")){
                    // Type is map
                    @each $name, $area in $desktop-custom-items {
                        --grid-item-#{$name}: #{$area};
                    }
        
                }@else {
                    // Type then is a List
                    $count: 1;
                    @each $name in $desktop-custom-items {
                        @if string.index($name, "/") == null {
                            --grid-item-#{$name}: #{$name};
                        }@else {
                            --grid-item-#{$count}: #{$name};
                            $count: $count + 1;
                        }
                    }
                }
            }
        }
    }
}



// Sub-grid is a grid without any type of padding.
@mixin _sub-grid(
            // How to size the grid and align/justify the items.
            $height: auto,
            $width: 100%,
            $background: none,
            $justify-items: center,
            $align-items: center,
            
            // How many columns and rows to make.
            $cols: null,
            $col-repeat: null,
            $rows: null,
            $row-repeat: null,
            $grid-areas: null,
            
            // How much space to create between the sub-grid's boxes.
            $col-gap: 0,
            $row-gap: 0,

            // Whether or not to create custom item variables
            $auto-items: true,
            $custom-items: null,

            // Where to put the threshold and how to set it up for mobile.
            $tablet-threshold: 0, // Original: 425px,
            $tablet-height: auto,
            $tablet-width: 100%,
            $tablet-background: none,
            $tablet-cols: null,
            $tablet-col-repeat: null,
            $tablet-rows: null,
            $tablet-row-repeat: null,
            $tablet-grid-areas: null,
            $tablet-col-gap: 0,
            $tablet-row-gap: 0,
            $tablet-justify-items: center,
            $tablet-align-items: center,
            $tablet-auto-items: false,
            $tablet-custom-items: null,
            
            // Where to put the threshold and how to set it up for tablet.
            $desktop-threshold: 0,
            $desktop-height: auto,
            $desktop-width: 100%,
            $desktop-background: none,
            $desktop-cols: null,
            $desktop-col-repeat: null,
            $desktop-rows: null,
            $desktop-row-repeat: null,
            $desktop-grid-areas: null,
            $desktop-col-gap: 0,
            $desktop-row-gap: 0,
            $desktop-justify-items: center,
            $desktop-align-items: center,
            $desktop-auto-items: false,
            $desktop-custom-items: null){
    
    //Setup some variables that won't change for this screen size here.
    --height: #{$height};
    --width: #{$width};
    --bg: #{$background};
    justify-items: #{$justify-items};
    align-items: #{$align-items};
    --col-gap: #{$col-gap};
    --row-gap: #{$row-gap};
    

    // Making $grid-areas a string, with quotes.
    // This will format a list of strings so the CSS code will recognise it.
    @if $grid-areas != null {
        $temp: null;
        @each $area in $grid-areas {
            $temp: $temp + "\"" + $area + "\" ";
        }
        $grid-areas: $temp;

        --ga: #{$grid-areas}; 
    }

    

    @if $cols != null and $col-repeat == null {
        // Manual creation of the grid

        --cols: [sub-grid-col-start] #{$cols} [sub-grid-col-end];

        $col-repeat: list.length($cols);

    }@else if $cols == null and $col-repeat != null{
        // Repeat a default

        --cols: [sub-grid-col-start] repeat(#{$col-repeat},[col] 1fr) [sub-grid-col-end];

    }@else if $cols != null and $col-repeat != null{
        // Repeat users input X amount of times

        --cols: [sub-grid-col-start] repeat(#{$col-repeat}, #{$cols}) [sub-grid-col-end];

        $col-repeat: list.length($cols) * $col-repeat;

    }@else {
        // No user input so just create a single collumn (or default)

        --cols: [sub-grid-col-start] 1fr [sub-grid-col-end];

        $tablet-col-repeat: 1;
    }
    
    @if $rows != null and $row-repeat == null {
        // Full manual

        --rows: [sub-grid-row-start] #{$rows} [sub-grid-row-end];

        $row-repeat: list.length($rows);

    }@else if $rows == null and $row-repeat != null{
        // Repeat default

        --rows: [sub-grid-row-start] repeat(#{$row-repeat}, [row] auto) [sub-grid-row-end];

    }@else if $rows != null and $row-repeat != null{
        // Repeat users input X amount of times

        --rows: [sub-grid-row-start] repeat(#{$row-repeat}, #{$rows}) [sub-grid-row-end];

        $row-repeat: list.length($rows) * $row-repeat;

    }@else {
        // No user input so just create a single row (or default)

        --rows: [sub-grid-row-start] auto [sub-grid-row-end];

        $row-repeat: 1;

    }


    // Check and setup the layout of the items, if able to.
    @if $col-repeat > 0 and $row-repeat > 0 and $auto-items{
        $count: 1;
        @for $i from 1 through $row-repeat{
            @for $j from 1 through $col-repeat{
                --sub-grid-item-#{$count}: #{$i} / #{$j} / #{1 + $i} / #{1 + $j};
                $count: $count + 1;
            }
        }

    // TODO What if I have a choice to send a map instead of a list?
    }@else if $custom-items != null and $auto-items == false{
        
        @if type-of($custom-items) == type-of(1){
            // Type is number
            // Not sure how useful this one will be.
            $count: 1;
            @for $i from 1 through $custom-items {
                --sub-grid-item-#{$count}: #{$i} / #{$j} / #{1 + $i} / #{1 + $j};
                $count: $count + 1;
            }
        }@else if type-of($custom-items) == type-of(("":"")){
            // Type is map
            @each $name, $area in $custom-items {
                --sub-grid-item-#{$name}: #{$area};
            }

        }@else {
            // Type then is a List
            $count: 1;
            @each $name in $custom-items {
                @if string.index($name, "/") == null {
                    --sub-grid-item-#{$name}: #{$name};
                }@else {
                    --sub-grid-item-#{$count}: #{$name};
                    $count: $count + 1;
                }
            }
        }
        
        // $count: 1;
        // @each $item in $custom-items {
        //     --sub-grid-item-#{$count}: #{$item};
        //     $count: $count + 1;
        // }
    }

    
    

    // Changes for the screen sizes.
    @if type-of($tablet-threshold) == type-of(0) and $tablet-threshold > 0 {
        @media screen and (min-width: $tablet-threshold){
        
            // The if statements bellow allow us to stop code from repeating itself needlessly.
            @if $height != $tablet-height {
                --height: #{$tablet-height};
            }
            @if $width != $tablet-width {
                --width: #{$tablet-width};
            }
            @if $background != $tablet-background {
                --bg: #{$tablet-background};
            }
    
            @if $justify-items != $tablet-justify-items {
                justify-items: #{$tablet-justify-items};
            }
            @if $align-items != $tablet-align-items {
                align-items: #{$tablet-align-items};
            }
            @if $col-gap != $tablet-col-gap {
                --col-gap: #{$tablet-col-gap};
            }
            @if $row-gap != $tablet-row-gap {
                --row-gap: #{$tablet-row-gap};
            }
            @if $tablet-grid-areas != null {
                $temp: null;
                @each $area in $tablet-grid-areas {
                    $temp: $temp + "\"" + $area + "\" ";
                }
                $tablet-grid-areas: $temp;
                --ga: #{$tablet-grid-areas};
            }


            @if $tablet-cols != null and $tablet-col-repeat == null {
                // Manual creation of the grid
        
                --cols: [sub-grid-col-start] #{$tablet-cols} [sub-grid-col-end];
        
                $tablet-col-repeat: list.length($tablet-cols);
        
            }@else if $tablet-cols == null and $tablet-col-repeat != null{
                // Repeat a default
        
                --cols: [sub-grid-col-start] repeat(#{$tablet-col-repeat},[col] 1fr) [sub-grid-col-end];
        
            }@else if $tablet-cols != null and $tablet-col-repeat != null{
                // Repeat users input X amount of times
        
                --cols: [sub-grid-col-start] repeat(#{$tablet-col-repeat}, #{$tablet-cols}) [sub-grid-col-end];
        
                $tablet-col-repeat: list.length($tablet-cols) * $tablet-col-repeat;
        
            }@else {
                // No user input so just create a single collumn (or default)
        
                --cols: [sub-grid-col-start] 1fr [sub-grid-col-end];
        
                $tablet-col-repeat: 1;
            }
            
            @if $tablet-rows != null and $tablet-row-repeat == null {
                // Full manual
        
                --rows: [sub-grid-row-start] #{$tablet-rows} [sub-grid-row-end];
        
                $tablet-row-repeat: list.length($tablet-rows);
        
            }@else if $tablet-rows == null and $tablet-row-repeat != null{
                // Repeat default
        
                --rows: [sub-grid-row-start] repeat(#{$tablet-row-repeat}, [row] auto) [sub-grid-row-end];
        
            }@else if $tablet-rows != null and $tablet-row-repeat != null{
                // Repeat users input X amount of times
        
                --rows: [sub-grid-row-start] repeat(#{$tablet-row-repeat}, #{$tablet-rows}) [sub-grid-row-end];
        
                $tablet-row-repeat: list.length($tablet-rows) * $tablet-row-repeat;
        
            }@else {
                // No user input so just create a single row (or default)
        
                --rows: [sub-grid-row-start] auto [sub-grid-row-end];
        
                $tablet-row-repeat: 1;
        
            }

 
    
            // Check and setup the layout of the items, if able to.
            @if $tablet-col-repeat > 0 and $tablet-row-repeat > 0 and $tablet-auto-items{
                $count: 1;
                @for $i from 1 through $tablet-row-repeat{
                    @for $j from 1 through $tablet-col-repeat{
                        --sub-grid-item-#{$count}: #{$i} / #{$j} / #{1 + $i} / #{1 + $j};
                        $count: $count + 1;
                    }
                }
            }@else if $tablet-custom-items != null and $tablet-auto-items == false{
        
                @if type-of($tablet-custom-items) == type-of(1){
                    // Type is number
                    // Not sure how useful this one will be.
                    $count: 1;
                    @for $i from 1 through $tablet-custom-items {
                        --sub-grid-item-#{$count}: #{$i} / #{$j} / #{1 + $i} / #{1 + $j};
                        $count: $count + 1;
                    }
                }@else if type-of($tablet-custom-items) == type-of(("":"")){
                    // Type is map
                    @each $name, $area in $tablet-custom-items {
                        --sub-grid-item-#{$name}: #{$area};
                    }
        
                }@else {
                    // Type then is a List
                    $count: 1;
                    @each $name in $tablet-custom-items {
                        @if string.index($name, "/") == null {
                            --sub-grid-item-#{$name}: #{$name};
                        }@else {
                            --sub-grid-item-#{$count}: #{$name};
                            $count: $count + 1;
                        }
                    }
                }
            }
        }
    }


    @if type-of($desktop-threshold) == type-of(0) and $desktop-threshold > 0 {
        @media screen and (min-width: $desktop-threshold){
            @if $height != $desktop-height {
                --height: #{$desktop-height};
            }
            @if $width != $desktop-width {
                --width: #{$desktop-width};
            }
            @if $background != $desktop-background {
                --bg: #{$desktop-background};
            }
    
            @if $justify-items != $desktop-justify-items {
                justify-items: #{$desktop-justify-items};
            }
            @if $align-items != $desktop-align-items {
                align-items: #{$desktop-align-items};
            }
            @if $col-gap != $desktop-col-gap {
                --col-gap: #{$desktop-col-gap};
            }
            @if $row-gap != $desktop-row-gap {
                --row-gap: #{$desktop-row-gap};
            }
            @if $desktop-grid-areas != null {
                $temp: null;
                @each $area in $desktop-grid-areas {
                    $temp: $temp + "\"" + $area + "\" ";
                }
                $desktop-grid-areas: $temp;
                --ga: #{$desktop-grid-areas};
            }
    
            

            @if $desktop-cols != null and $desktop-col-repeat == null {
                // Manual creation of the grid
        
                --cols: [sub-grid-col-start] #{$desktop-cols} [sub-grid-col-end];
        
                $desktop-col-repeat: list.length($desktop-cols);
        
            }@else if $desktop-cols == null and $desktop-col-repeat != null{
                // Repeat a default
        
                --cols: [sub-grid-col-start] repeat(#{$desktop-col-repeat},[col] 1fr) [sub-grid-col-end];
        
            }@else if $desktop-cols != null and $desktop-col-repeat != null{
                // Repeat users input X amount of times
        
                --cols: [sub-grid-col-start] repeat(#{$desktop-col-repeat}, #{$desktop-cols}) [sub-grid-col-end];
        
                $desktop-col-repeat: list.length($desktop-cols) * $desktop-col-repeat;
        
            }@else {
                // No user input so just create a single collumn (or default)
        
                --cols: [sub-grid-col-start] 1fr [sub-grid-col-end];
        
                $desktop-col-repeat: 1;
            }
            
            @if $desktop-rows != null and $desktop-row-repeat == null {
                // Full manual
        
                --rows: [sub-grid-row-start] #{$desktop-rows} [sub-grid-row-end];
        
                $desktop-row-repeat: list.length($desktop-rows);
        
            }@else if $desktop-rows == null and $desktop-row-repeat != null{
                // Repeat default
        
                --rows: [sub-grid-row-start] repeat(#{$desktop-row-repeat}, [row] auto) [sub-grid-row-end];
        
            }@else if $desktop-rows != null and $desktop-row-repeat != null{
                // Repeat users input X amount of times
        
                --rows: [sub-grid-row-start] repeat(#{$desktop-row-repeat}, #{$desktop-rows}) [sub-grid-row-end];
        
                $desktop-row-repeat: list.length($desktop-rows) * $desktop-row-repeat;
        
            }@else {
                // No user input so just create a single row (or default)
        
                --rows: [sub-grid-row-start] auto [sub-grid-row-end];
        
                $desktop-row-repeat: 1;
        
            }


    
            // Check and setup the layout of the items, if able to.
            @if $desktop-col-repeat > 0 and $desktop-row-repeat > 0 and $desktop-auto-items{
                $count: 1;
                @for $i from 1 through $desktop-row-repeat{
                    @for $j from 1 through $desktop-col-repeat{
                        --sub-grid-item-#{$count}: #{$i} / #{$j} / #{1 + $i} / #{1 + $j};
                        $count: $count + 1;
                    }
                }
            }@else if $desktop-custom-items != null and $desktop-auto-items == false{
        
                @if type-of($desktop-custom-items) == type-of(1){
                    // Type is number
                    // Not sure how useful this one will be.
                    $count: 1;
                    @for $i from 1 through $desktop-custom-items {
                        --sub-grid-item-#{$count}: #{$i} / #{$j} / #{1 + $i} / #{1 + $j};
                        $count: $count + 1;
                    }
                }@else if type-of($desktop-custom-items) == type-of(("":"")){
                    // Type is map
                    @each $name, $area in $desktop-custom-items {
                        --sub-grid-item-#{$name}: #{$area};
                    }
        
                }@else {
                    // Type then is a List
                    $count: 1;
                    @each $name in $desktop-custom-items {
                        @if string.index($name, "/") == null {
                            --sub-grid-item-#{$name}: #{$name};
                        }@else {
                            --sub-grid-item-#{$count}: #{$name};
                            $count: $count + 1;
                        }
                    }
                }
            }
        }
    }
}